# write a class that takes in a single run of oxdna (can include min, relax and sim steps)
# perform a range of analyses on that dataset
from oxDNA_analysis_tools.mean import mean
from oxDNA_analysis_tools.deviation import deviation
from oxDNA_analysis_tools.deviation import output

# all functions required to read a configuration using the new RyeReader
from oxDNA_analysis_tools.UTILS.RyeReader import describe, get_confs, inbox

# the function used to visualize a configuration in oxView
from oxDNA_analysis_tools.UTILS.oxview import oxdna_conf

top = "./hairpin.top"
traj = "./hairpin.conf"
input_file = "./input"
# RyeReader uses indexing allows for random access in the trajectory
top_info, traj_info = describe(top, traj)



class trajAnalysis:
    """
    The trajAnalysis class corresponds to one run of oxDNA. It can take in all the data generated by oxDNA for multiple steps including minimization, relaxation and simulation. Using this data, we perform various analyses as listed in the Methods list below. 

    Attributes:

    Methods: 
    - self.__init__ : initialize the class by pointing to the dataset
    - self.runRMSFAnalysis : calculate the root-mean-square fluctuations for the structure
    - self.plotEnergyData : plot the energy data returned by oxDNA
    - self.plotTrajData : generates multiple plots showing the position and velocity data for one nucleotide
    - self.plotAcclnData : calculates the accelerations for one nucleotide and plots them
    - self.getStats : calculate the mean, std dev, min, max, median, count for every feature in the trajectory data
    - self.getBoxPlots : generates box plots for the position, velocity data for one nucleotide
    - self.getPosVelCorr : compute the correlation between nucleotide position and velocity 
    - self.getBasePairOcc : compute the base pair occupancy for the structure
    - self.getPCA : compute the PCA of the modes of deviations for the structure
    - self.getClusters : use DBSCAN to get clusters of the structure to look for similarities in deformations
    """

    def __init__(self):


    def runRMSFAnalysis(self, oxdna_dir, deviation_file, traj_file):
        """
        The format for calling mean.py is: 
         -p <n_cpus> -f <oxDNA/json/both> -o <mean structure> -d <deviations file> -i <index file> -a <align conf id>

        """
    
        # command = "python3 {0}/src/oxDNA_analysis_tools/mean.py -f both -d {1} {2}".format(oxdna_dir, deviation_file, traj_file)
        # command = "~/.local/bin/oat mean -d {0} {1}".format(deviation_file, traj_file)
        command = "oat mean -d {0} {1}".format(deviation_file, traj_file)
        os.system(command)

        mean_structure = "mean.json"
        # command = "python3 {0}/src/oxDNA_analysis_tools/deviations.py -o {1} -r {2} {3} {4}".format(oxdna_dir, RMSF_file, RMSF_plot, mean_structure, traj_file)
        # command = "~/.local/bin/oat deviations  -o {0} -r {1} {2} {3}".format(RMSF_file, RMSF_plot, mean_structure, traj_file)
        command = "oat deviations  -o {0} -r {1} {2} {3}".format(RMSF_file, RMSF_plot, mean_structure, traj_file)
        os.system(command)
